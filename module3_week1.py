# -*- coding: utf-8 -*-
"""Module3/week1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1otlEAnnz3fBPSSGgOk6tLNbiBg0HynWa
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
dataset_path = "/content/IMDB-Movie-Data.csv"
data = pd.read_csv(dataset_path)
data

data_indexed = pd.read_csv(dataset_path, index_col = "Title")
data_indexed

data.head(5)

data.info()

data.describe()

genre = data["Genre"]
genre

data[["Genre", "Rating"]]

data.iloc[10:15][["Genre"]]

data[((data["Year"] >= 2010) & (data["Year"] <= 2015) & (data["Rating"] < 6))][:5]

data.groupby("Director")[["Rating"]].mean()

data.groupby("Director")[["Rating"]].mean().sort_values(by = "Rating", ascending = False).head()

data.isnull().sum()

# Xoá cột chứa nhiều giá trị null
data.drop("Metascore", axis = 1).head()

data.dropna()

revenue_mean = data_indexed["Revenue (Millions)"].mean()
print("Mean revenue is: ", revenue_mean)
data_indexed["Revenue (Millions)"].fillna(revenue_mean, inplace = True)
data_indexed

data_indexed.isnull().sum()

def rating_group(rating):
  if rating >= 8.0:
    return "Good"
  elif rating >= 7.0:
    return "Medium"


data["Rating_category"] = data["Rating"].apply(rating_group)
data.head()

dataset_path = "/content/opsd_germany_daily.csv"
ospd_daily = pd.read_csv(dataset_path)
ospd_daily.head(3)

ospd_daily = ospd_daily.set_index("Date")
ospd_daily.head(3)

ospd_daily = pd.read_csv(dataset_path, index_col = "Date", parse_dates = True)
ospd_daily["Year"] = ospd_daily.index.year
ospd_daily["Month"] = ospd_daily.index.month
ospd_daily["Day"] = ospd_daily.index.day
ospd_daily.sample(5, random_state = 0)

ospd_daily.loc["2014-01-20" : "2014-01-22"]

import matplotlib.pyplot as plt
import seaborn as sns
sns.set(rc = {"figure.figsize":(11,4)})
ospd_daily["Consumption"].plot(linewidth = 0.5)

cols_plot = ["Consumption" , "Solar" , "Wind"]
axes = ospd_daily [ cols_plot ]. plot ( marker =".", alpha =0.5 , linestyle ="None",
figsize =(11 , 9) , subplots = True )
for ax in axes :
 ax. set_ylabel ("Daily Totals (GWh)")
plt . show ()

import matplotlib.pyplot as plt
import seaborn as sns

# Tạo figure với 3 hàng, 1 cột, kích thước 11x10 và chia sẻ trục x
fig, axes = plt.subplots(3, 1, figsize=(11, 10), sharex=True)

# Lặp qua các cột 'Consumption', 'Solar', 'Wind' và các trục tương ứng
for name, ax in zip(['Consumption', 'Solar', 'Wind'], axes):
    # Vẽ biểu đồ boxplot cho từng cột theo Month
    sns.boxplot(data=ospd_daily, x='Month', y=name, ax=ax)

    # Đặt nhãn trục y là GWh
    ax.set_ylabel('GWh')

    # Đặt tiêu đề cho từng biểu đồ là tên của cột
    ax.set_title(name)

    # Bỏ nhãn trục x cho tất cả các biểu đồ trừ biểu đồ cuối cùng
    if ax != axes[-1]:
        ax.set_xlabel('')

# Hiển thị biểu đồ
plt.show()

pd.date_range("1998-03-10", "1998-03-15", freq = "D")

times_sample = pd. to_datetime ([ "2013-02-03", "2013-02-06", "2013-02-08"])
consum_sample = ospd_daily .loc [ times_sample , ["Consumption"]]. copy ()
consum_sample

# Chuyển đổi dữ liệu thành tần suất hàng ngày, không điền giá trị thiếu
consum_freq = consum_sample.asfreq('D')

# Tạo một cột mới với các giá trị thiếu được điền bằng phương pháp forward fill
consum_freq['Consumption - Forward Fill'] = consum_sample.asfreq('D', method='ffill')

# Hiển thị dữ liệu
consum_freq

ospd_daily.loc["2006-01-02":"2006-01-08"]["Consumption"].mean()

# Chỉ định các cột dữ liệu muốn bao gồm (loại bỏ Year, Month, Weekday Name)
data_columns = ['Consumption', 'Wind', 'Solar']

# Lấy mẫu lại theo tần suất hàng tuần, tổng hợp bằng cách tính trung bình
opsd_weekly_mean = ospd_daily[data_columns].resample('W').mean()

# Hiển thị 3 hàng đầu tiên của dữ liệu đã lấy mẫu
opsd_weekly_mean.head(3)

# Khoảng thời gian bắt đầu và kết thúc để trích xuất dữ liệu
start, end = '2017-01', '2017-06'

# Vẽ chuỗi thời gian lấy mẫu hàng ngày và hàng tuần
fig, ax = plt.subplots()

# Vẽ chuỗi thời gian hàng ngày cho cột 'Solar'
ax.plot(ospd_daily.loc[start:end, 'Solar'],
        marker='.', linestyle='-', linewidth=0.5, label='Daily')

# Vẽ chuỗi thời gian lấy mẫu trung bình hàng tuần cho cột 'Solar'
ax.plot(opsd_weekly_mean.loc[start:end, 'Solar'],
        marker='o', markersize=8, linestyle='-', label='Weekly Mean Resample')

# Gán nhãn cho trục y
ax.set_ylabel('Solar Production (GWh)')

# Hiển thị chú thích
ax.legend()

# Hiển thị biểu đồ
plt.show()

opsd_7d = ospd_daily [ data_columns ]. rolling (7 , center = True ) . mean ()
opsd_7d . head (10)

import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Xác định các cột dữ liệu cần tính toán
data_columns = ['Consumption', 'Wind', 'Solar']

# Tính trung bình trượt 365 ngày với điều kiện ít nhất 360 ngày hợp lệ
opsd_365d = ospd_daily[data_columns].rolling(window=365, center=True, min_periods=360).mean()

# Vẽ chuỗi thời gian hàng ngày, trung bình trượt 7 ngày, và trung bình trượt 365 ngày
fig, ax = plt.subplots()

# Biểu đồ chuỗi thời gian hàng ngày (Daily)
ax.plot(ospd_daily['Consumption'], marker='.', markersize=2, color='0.6', linestyle='None', label='Daily')

# Biểu đồ chuỗi thời gian trung bình trượt 7 ngày (7-d Rolling Mean)
ax.plot(opsd_7d['Consumption'], linewidth=2, label='7-d Rolling Mean')

# Biểu đồ chuỗi thời gian trung bình trượt 365 ngày (Xu hướng dài hạn - 365-d Rolling Mean)
ax.plot(opsd_365d['Consumption'], color='0.2', linewidth=3, label='Trend (365-d Rolling Mean)')

# Đặt các dấu trên trục x theo từng năm
ax.xaxis.set_major_locator(mdates.YearLocator())

# Hiển thị chú thích, nhãn và tiêu đề cho biểu đồ
ax.legend()
ax.set_xlabel('Year')
ax.set_ylabel('Consumption (GWh)')
ax.set_title('Trends in Electricity Consumption')

# Hiển thị biểu đồ
plt.show()

import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Vẽ chuỗi thời gian trung bình trượt 365 ngày của năng lượng gió và năng lượng mặt trời
fig, ax = plt.subplots()

# Vẽ từng cột dữ liệu: 'Wind', 'Solar', và 'Wind + Solar'
for nm in ['Wind', 'Solar']:
    ax.plot(opsd_365d[nm], label=nm)

# Đặt dấu mốc trục x theo từng năm
ax.xaxis.set_major_locator(mdates.YearLocator())

# Điều chỉnh giới hạn trục y
ax.set_ylim(0, 400)

# Hiển thị chú thích và nhãn
ax.legend()
ax.set_ylabel('Production (GWh)')
ax.set_title('Trends in Electricity Production (365-d Rolling Means)')

# Hiển thị biểu đồ
plt.show()

