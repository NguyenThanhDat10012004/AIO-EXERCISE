# -*- coding: utf-8 -*-
"""class_oop.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19pPDv_G5DEa7FWQkkiOsZqmpL7qwxFyH
"""

class Person:
    def __init__(self, name, yob):
        self.name = name
        self.yob = yob
    def describe(self):
      return f"Name: {self.name} - YoB: {self.yob}"
class Student(Person):
    def __init__(self, name, yob, grade):
        super().__init__(name, yob)
        self.grade = grade

    def describe(self):
        print(f"Student - {super().describe()} - Grade: {self.grade}")
class Teacher(Person):
    def __init__(self, name, yob, subject):
        super().__init__(name, yob)
        self.subject = subject

    def describe(self):
        print(f"Teacher - {super().describe()} - Subject: {self.subject}")
class Doctor(Person):
    def __init__(self, name, yob, specialist):
        super().__init__(name, yob)
        self.specialist = specialist

    def describe(self):
        print(f"Doctor - {super().describe()} - Specialist: {self.specialist}")

student1 = Student ( name =" studentA ", yob =2010 , grade ="7")
student1 . describe ()

teacher1 = Teacher ( name =" teacherA ", yob =1969 , subject =" Math ")
teacher1 . describe ()

doctor1 = Doctor ( name =" doctorA ", yob =1945 , specialist =" Endocrinologists ")
doctor1 . describe ()

class Ward:
  def __init__(self, name):
    self.name = name
    self.a_list = []
  def add_person(self, person):
    self.a_list.append(person)
  def describe(self):
    print(f">> Ward Name: {self.name}")
    for person in self.a_list:
      person.describe()
  def count_doctor(self):
    count = 0
    for person in self.a_list:
      if isinstance(person, Doctor):
        count += 1
    return count
  def sort_age(self):
    self.a_list.sort(key=lambda x: x.yob, reverse= True)
  def compute_average(self):
    age = [x.yob for x in self.a_list if isinstance(x, Teacher)]
    return sum(age) / len(age)

teacher2 = Teacher ( name =" teacherB ", yob =1995 , subject =" History ")
doctor2 = Doctor ( name =" doctorB ", yob =1975 , specialist =" Cardiologists ")
ward1 = Ward ( name =" Ward1 ")
ward1 . add_person ( student1 )
ward1 . add_person ( teacher1 )
ward1 . add_person ( teacher2 )
ward1 . add_person ( doctor1 )
ward1 . add_person ( doctor2 )
ward1 . describe ()

print ( f"\ nNumber of doctors : { ward1 . count_doctor ()}")

print ("\nAfter sorting Age of Ward1 people ")
ward1 . sort_age ()
ward1 . describe ()

print ( f"\nAverage year of birth ( teachers ): { ward1 . compute_average ()}")